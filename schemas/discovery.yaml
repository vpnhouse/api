openapi: 3.0.3
info:
  title: DiscoveryAPI
  version: '1.0'
  contact:
    email: support@vpnhouse.net
    name: Sergey Kovalev
  description: Discovery API
paths:
  /api/client/locations:
    get:
      summary: Get locations
      tags:
        - client
        - discovery
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
              examples: {}
        '401':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '403':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '500':
          $ref: 'common.yaml#/components/responses/ResponseError'
      operationId: get-locations
      description: Returns available locations for client
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: project_id
    parameters: []
  /api/client/credentials:
    get:
      summary: Get credentials
      tags:
        - client
        - discovery
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '401':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '403':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '500':
          $ref: 'common.yaml#/components/responses/ResponseError'
      operationId: get-credentials
      description: Return credentials to connect for specific location
      security:
        - bearer: []
        - AuthorizerKey: []
      parameters:
        - schema:
            type: string
            example: US
          in: query
          name: location
        - schema:
            type: string
            format: uuid
          in: query
          name: project_id
    parameters: []
  /api/client/optimal:
    get:
      summary: Get optimal
      tags:
        - client
        - discovery
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '401':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '403':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '500':
          $ref: 'common.yaml#/components/responses/ResponseError'
      operationId: get-optimal
      description: Return optimal credentials to connect from specific country
      parameters:
        - schema:
            type: string
            example: US
          in: query
          name: country
    parameters: [ ]
components:
  schemas:
    Node:
      title: Node
      type: object
      x-examples:
        example-1:
          id: node-dev-1
          connection_addresses:
            - 'https://vpn-node-dev-1.project.org'
          dns:
            - hostname: vpn-node-dev-1.project.org
              ipv4:
                - 192.168.0.1
              ipv6:
                - '2001:0db8:85a3:0000:0000:8a2e:0370:7334'
      required:
        - id
      properties:
        id:
          type: string
          example: node-dev-1
        connection_addresses:
          type: array
          description: "list of node URLs (including schema)"
          items:
            type: string
            example: 'https://vpn-node-dev-1.project.org'
        dns:
          type: array
          description: "list of DNS entries for this node"
          items:
            type: object
            required:
              - hostname
              - ipv4
            properties:
              hostname:
                type: string
                format: hostname
              ipv4:
                type: array
                items:
                  type: string
                  format: ipv4
              ipv6:
                type: array
                items:
                  type: string
                  format: ipv6
    Location:
      title: Locations
      type: object
      x-examples:
        example:
          value:
            id: US
            name: 'United States, NY'
            labels:
              country: United States
              city: New-York
      properties:
        id:
          type: string
          example: US
        name:
          type: string
          example: United States
        labels:
          type: object
      required:
        - id
        - name
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
    AuthorizerKey:
      name: X-VPNHOUSE-AUTHORIZER-KEY
      type: apiKey
      in: header
tags:
  - name: client
  - name: discovery
security:
  - bearer: []
