// Package license_service provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package license_service

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
	externalRef0 "github.com/vpnhouse/api/go/server/common"
)

const (
	ServiceKeyScopes  = "ServiceKey.Scopes"
	ServiceNameScopes = "ServiceName.Scopes"
	BearerScopes      = "bearer.Scopes"
)

// AppleServerNotificationsRequest defines model for AppleServerNotificationsRequest.
type AppleServerNotificationsRequest struct {
	SignedPayload string `json:"signedPayload"`
}

// ApplyParams defines model for ApplyParams.
type ApplyParams struct {
	Email     *string `json:"email,omitempty"`
	ProjectId *string `json:"project_id,omitempty"`
	UserId    *string `json:"user_id,omitempty"`
}

// ApplyTrialLicenseRequest defines model for ApplyTrialLicenseRequest.
type ApplyTrialLicenseRequest struct {
	ProductId string `json:"product_id"`
	ProjectId string `json:"project_id"`
	UserId    string `json:"user_id"`
}

// CreateLicenseParams defines model for CreateLicenseParams.
type CreateLicenseParams struct {
	Disabled         *bool                   `json:"disabled"`
	EndAt            *time.Time              `json:"end_at"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json"`
	ProductId        *string                 `json:"product_id"`
	ProjectId        *string                 `json:"project_id"`
	PurchaseJson     *map[string]interface{} `json:"purchase_json"`
	SelectorJson     *map[string]interface{} `json:"selector_json"`
	StartAt          *time.Time              `json:"start_at"`
	UserId           *string                 `json:"user_id"`
}

// CreateProductParams defines model for CreateProductParams.
type CreateProductParams struct {
	Amount           *int64                  `json:"amount"`
	Currency         *string                 `json:"currency"`
	Disabled         *bool                   `json:"disabled"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json"`

	// Labels in JSON format
	LabelsJson   externalRef0.LabelsJson `json:"labels_json"`
	LicenseType  *string                 `json:"license_type"`
	Name         *string                 `json:"name"`
	PaymentJson  *map[string]interface{} `json:"payment_json"`
	Period       *string                 `json:"period"`
	SelectorJson *map[string]interface{} `json:"selector_json"`
}

// CreatePurchaseContextRequest defines model for CreatePurchaseContextRequest.
type CreatePurchaseContextRequest struct {
	// Client's 2-letter country code (ISO 3166)
	ClientCountry *string `json:"client_country,omitempty"`

	// Client's OS (ios, android, windows, etc.)
	ClientOs  *string `json:"client_os,omitempty"`
	Email     string  `json:"email"`
	ProductId string  `json:"product_id"`
	ProjectId string  `json:"project_id"`
	UserId    *string `json:"user_id,omitempty"`
}

// CreatePurchaseContextResp defines model for CreatePurchaseContextResp.
type CreatePurchaseContextResp struct {
	PurchaseContextId string `json:"purchase_context_id"`
}

// CreatePurchaseParams defines model for CreatePurchaseParams.
type CreatePurchaseParams struct {
	Email            *string                 `json:"email"`
	EndAt            *time.Time              `json:"end_at"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json"`
	LicenseId        *string                 `json:"license_id"`
	Processed        *bool                   `json:"processed"`
	ProductId        *string                 `json:"product_id"`
	ProjectId        *string                 `json:"project_id"`
	PurchaseJson     *map[string]interface{} `json:"purchase_json"`
	SelectorJson     *map[string]interface{} `json:"selector_json"`
	StartAt          *time.Time              `json:"start_at"`
	UserId           *string                 `json:"user_id"`
}

// FindLicenseParams defines model for FindLicenseParams.
type FindLicenseParams struct {
	CreatedAt        *time.Time              `json:"created_at,omitempty"`
	Disabled         *bool                   `json:"disabled,omitempty"`
	EndAt            *time.Time              `json:"end_at,omitempty"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json,omitempty"`
	ProductId        *string                 `json:"product_id,omitempty"`
	ProjectId        *string                 `json:"project_id,omitempty"`
	PurchaseJson     *map[string]interface{} `json:"purchase_json,omitempty"`
	SelectorJson     *map[string]interface{} `json:"selector_json,omitempty"`
	StartAt          *time.Time              `json:"start_at,omitempty"`
	UpdatedAt        *time.Time              `json:"updated_at,omitempty"`
	UserId           *string                 `json:"user_id,omitempty"`
}

// FindProductParams defines model for FindProductParams.
type FindProductParams struct {
	Amount           *int64                  `json:"amount,omitempty"`
	CreatedAt        *time.Time              `json:"created_at,omitempty"`
	Currency         *string                 `json:"currency,omitempty"`
	Disabled         *bool                   `json:"disabled,omitempty"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json,omitempty"`

	// Labels in JSON format
	LabelsJson   *externalRef0.LabelsJson `json:"labels_json,omitempty"`
	LicenseType  *string                  `json:"license_type,omitempty"`
	Name         *string                  `json:"name,omitempty"`
	PaymentJson  *map[string]interface{}  `json:"payment_json,omitempty"`
	Period       *string                  `json:"period,omitempty"`
	SelectorJson *map[string]interface{}  `json:"selector_json,omitempty"`
	UpdatedAt    *time.Time               `json:"updated_at,omitempty"`
}

// FindPurchaseParams defines model for FindPurchaseParams.
type FindPurchaseParams struct {
	CreatedAt        *time.Time              `json:"created_at,omitempty"`
	Email            *string                 `json:"email,omitempty"`
	EndAt            *time.Time              `json:"end_at,omitempty"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json,omitempty"`
	LicenseId        *string                 `json:"license_id,omitempty"`
	Processed        *bool                   `json:"processed,omitempty"`
	ProductId        *string                 `json:"product_id,omitempty"`
	ProjectId        *string                 `json:"project_id,omitempty"`
	PurchaseJson     *map[string]interface{} `json:"purchase_json,omitempty"`
	SelectorJson     *map[string]interface{} `json:"selector_json,omitempty"`
	StartAt          *time.Time              `json:"start_at,omitempty"`
	UpdatedAt        *time.Time              `json:"updated_at,omitempty"`
	UserId           *string                 `json:"user_id,omitempty"`
}

// GetAvailableLicensesRequest defines model for GetAvailableLicensesRequest.
type GetAvailableLicensesRequest struct {
	ProjectId string `json:"project_id"`
	UserId    string `json:"user_id"`
}

// License defines model for License.
type License struct {
	CreatedAt        *time.Time              `json:"created_at,omitempty"`
	Disabled         *bool                   `json:"disabled,omitempty"`
	EndAt            *time.Time              `json:"end_at,omitempty"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json,omitempty"`
	Id               *string                 `json:"id,omitempty"`
	ProductId        *string                 `json:"product_id,omitempty"`
	ProjectId        *string                 `json:"project_id,omitempty"`
	PurchaseJson     *map[string]interface{} `json:"purchase_json,omitempty"`
	SelectorJson     *map[string]interface{} `json:"selector_json,omitempty"`
	StartAt          *time.Time              `json:"start_at,omitempty"`
	UpdatedAt        *time.Time              `json:"updated_at,omitempty"`
	UserId           *string                 `json:"user_id,omitempty"`
}

// PatchLicenseParams defines model for PatchLicenseParams.
type PatchLicenseParams struct {
	Disabled         *bool                   `json:"disabled,omitempty"`
	EndAt            *time.Time              `json:"end_at,omitempty"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json,omitempty"`
	ProductId        *string                 `json:"product_id,omitempty"`
	ProjectId        *string                 `json:"project_id,omitempty"`
	PurchaseJson     *map[string]interface{} `json:"purchase_json,omitempty"`
	SelectorJson     *map[string]interface{} `json:"selector_json,omitempty"`
	StartAt          *time.Time              `json:"start_at,omitempty"`
	UpdatedAt        *time.Time              `json:"updated_at"`
	UserId           *string                 `json:"user_id,omitempty"`
}

// PatchProductParams defines model for PatchProductParams.
type PatchProductParams struct {
	Amount           *int64                  `json:"amount"`
	Currency         *string                 `json:"currency"`
	Disabled         *bool                   `json:"disabled,omitempty"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json,omitempty"`

	// Labels in JSON format
	LabelsJson   *externalRef0.LabelsJson `json:"labels_json,omitempty"`
	LicenseType  *string                  `json:"license_type,omitempty"`
	Name         *string                  `json:"name,omitempty"`
	PaymentJson  *map[string]interface{}  `json:"payment_json,omitempty"`
	Period       *string                  `json:"period,omitempty"`
	SelectorJson *map[string]interface{}  `json:"selector_json,omitempty"`
	UpdatedAt    *time.Time               `json:"updated_at"`
}

// PatchPurchaseParams defines model for PatchPurchaseParams.
type PatchPurchaseParams struct {
	Email            *string                 `json:"email,omitempty"`
	EndAt            *time.Time              `json:"end_at,omitempty"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json,omitempty"`
	LicenseId        *string                 `json:"license_id,omitempty"`
	Processed        *bool                   `json:"processed,omitempty"`
	ProductId        *string                 `json:"product_id,omitempty"`
	ProjectId        *string                 `json:"project_id,omitempty"`
	PurchaseJson     *map[string]interface{} `json:"purchase_json,omitempty"`
	SelectorJson     *map[string]interface{} `json:"selector_json,omitempty"`
	StartAt          *time.Time              `json:"start_at,omitempty"`
	UpdatedAt        *time.Time              `json:"updated_at"`
	UserId           *string                 `json:"user_id,omitempty"`
}

// PaymentDetailsRequest defines model for PaymentDetailsRequest.
type PaymentDetailsRequest struct {
	// Client's 2-letter country code (ISO 3166)
	ClientCountry *string `json:"client_country,omitempty"`

	// Client's OS (ios, android, windows, etc.)
	ClientOs       *string `json:"client_os,omitempty"`
	Email          string  `json:"email"`
	GaId           *string `json:"ga_id,omitempty"`
	InstallationId *string `json:"installation_id,omitempty"`
	ProductId      string  `json:"product_id"`
	ProjectId      string  `json:"project_id"`
	UserId         *string `json:"user_id,omitempty"`
}

// PaymentDetailsResp defines model for PaymentDetailsResp.
type PaymentDetailsResp struct {
	PaymentUrl string `json:"payment_url"`
}

// PaymentLinkResp defines model for PaymentLinkResp.
type PaymentLinkResp struct {
	PaymentUrl string `json:"payment_url"`
}

// ProcessAndroidPurchaseRequest defines model for ProcessAndroidPurchaseRequest.
type ProcessAndroidPurchaseRequest struct {
	ProjectId string `json:"project_id"`
	Purchase  string `json:"purchase"`
	Signature string `json:"signature"`
	UserId    string `json:"user_id"`
}

// ProcessIOSPurchaseRequest defines model for ProcessIOSPurchaseRequest.
type ProcessIOSPurchaseRequest struct {
	JwsReceipt string `json:"jws_receipt"`
	UserId     string `json:"user_id"`
}

// Product defines model for Product.
type Product struct {
	// The currency amount in cents ($19.99)
	Amount    *int64     `json:"amount,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// The currency code (ISO 4217)
	Currency         *string                 `json:"currency,omitempty"`
	Disabled         *bool                   `json:"disabled,omitempty"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json,omitempty"`
	Id               *string                 `json:"id,omitempty"`

	// Labels in JSON format
	LabelsJson   *externalRef0.LabelsJson `json:"labels_json,omitempty"`
	LicenseType  *string                  `json:"license_type,omitempty"`
	Name         *string                  `json:"name,omitempty"`
	PaymentJson  *map[string]interface{}  `json:"payment_json,omitempty"`
	Period       *string                  `json:"period,omitempty"`
	SelectorJson *map[string]interface{}  `json:"selector_json,omitempty"`
	UpdatedAt    *time.Time               `json:"updated_at,omitempty"`
}

// Purchase defines model for Purchase.
type Purchase struct {
	CreatedAt        *time.Time              `json:"created_at,omitempty"`
	Email            *string                 `json:"email,omitempty"`
	EndAt            *time.Time              `json:"end_at,omitempty"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json,omitempty"`
	Id               *string                 `json:"id,omitempty"`
	LicenseId        *string                 `json:"license_id,omitempty"`
	Processed        *bool                   `json:"processed,omitempty"`
	ProductId        *string                 `json:"product_id,omitempty"`
	ProjectId        *string                 `json:"project_id,omitempty"`
	PurchaseJson     *map[string]interface{} `json:"purchase_json,omitempty"`
	SelectorJson     *map[string]interface{} `json:"selector_json,omitempty"`
	StartAt          *time.Time              `json:"start_at,omitempty"`
	UpdatedAt        *time.Time              `json:"updated_at,omitempty"`
	UserId           *string                 `json:"user_id,omitempty"`
}

// SendPayInCryptoRequest defines model for SendPayInCryptoRequest.
type SendPayInCryptoRequest struct {
	Email     string `json:"email"`
	ProjectId string `json:"project_id"`
}

// SubscriptionResp defines model for SubscriptionResp.
type SubscriptionResp struct {
	EntitlementsJson map[string]interface{} `json:"entitlements_json"`
	Id               string                 `json:"id"`
	Name             string                 `json:"name"`
	RenewAt          time.Time              `json:"renew_at"`
	Tariff           string                 `json:"tariff"`
}

// SubscriptionsRequest defines model for SubscriptionsRequest.
type SubscriptionsRequest struct {
	ProjectId string `json:"project_id"`
	UserId    string `json:"user_id"`
}

// UpdateLicenseParams defines model for UpdateLicenseParams.
type UpdateLicenseParams struct {
	Disabled         *bool                   `json:"disabled"`
	EndAt            *time.Time              `json:"end_at"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json"`
	ProductId        *string                 `json:"product_id"`
	ProjectId        *string                 `json:"project_id"`
	PurchaseJson     *map[string]interface{} `json:"purchase_json"`
	SelectorJson     *map[string]interface{} `json:"selector_json"`
	StartAt          *time.Time              `json:"start_at"`
	UpdatedAt        *time.Time              `json:"updated_at"`
	UserId           *string                 `json:"user_id"`
}

// UpdateProductParams defines model for UpdateProductParams.
type UpdateProductParams struct {
	Amount           *int64                  `json:"amount"`
	Currency         *string                 `json:"currency"`
	Disabled         *bool                   `json:"disabled"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json"`

	// Labels in JSON format
	LabelsJson   externalRef0.LabelsJson `json:"labels_json"`
	LicenseType  *string                 `json:"license_type"`
	Name         *string                 `json:"name"`
	PaymentJson  *map[string]interface{} `json:"payment_json"`
	Period       *string                 `json:"period"`
	SelectorJson *map[string]interface{} `json:"selector_json"`
	UpdatedAt    *time.Time              `json:"updated_at"`
}

// UpdatePurchaseParams defines model for UpdatePurchaseParams.
type UpdatePurchaseParams struct {
	Email            *string                 `json:"email"`
	EndAt            *time.Time              `json:"end_at"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json"`
	LicenseId        *string                 `json:"license_id"`
	Processed        *bool                   `json:"processed"`
	ProductId        *string                 `json:"product_id"`
	ProjectId        *string                 `json:"project_id"`
	PurchaseJson     *map[string]interface{} `json:"purchase_json"`
	SelectorJson     *map[string]interface{} `json:"selector_json"`
	StartAt          *time.Time              `json:"start_at"`
	UpdatedAt        *time.Time              `json:"updated_at"`
	UserId           *string                 `json:"user_id"`
}

// UserLicense defines model for UserLicense.
type UserLicense struct {
	// Embedded struct due to allOf(#/components/schemas/License)
	License `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Labels in JSON format
	LabelsJson *externalRef0.LabelsJson `json:"labels_json,omitempty"`
	Period     *string                  `json:"period,omitempty"`
}

// GetAnonymousEntitlementsParams defines parameters for GetAnonymousEntitlements.
type GetAnonymousEntitlementsParams struct {
	ProjectId    string `json:"project_id"`
	PlatformType string `json:"platform_type"`
}

// AppleServerNotificationsJSONBody defines parameters for AppleServerNotifications.
type AppleServerNotificationsJSONBody AppleServerNotificationsRequest

// ApplyForUserByEmailJSONBody defines parameters for ApplyForUserByEmail.
type ApplyForUserByEmailJSONBody ApplyParams

// ApplyTrialLicenseJSONBody defines parameters for ApplyTrialLicense.
type ApplyTrialLicenseJSONBody ApplyTrialLicenseRequest

// CreatePurchaseContextJSONBody defines parameters for CreatePurchaseContext.
type CreatePurchaseContextJSONBody CreatePurchaseContextRequest

// GetEntitlementsParams defines parameters for GetEntitlements.
type GetEntitlementsParams struct {
	ProjectId    string `json:"project_id"`
	UserId       string `json:"user_id"`
	PlatformType string `json:"platform_type"`
}

// FindLicenseJSONBody defines parameters for FindLicense.
type FindLicenseJSONBody FindLicenseParams

// FindProductJSONBody defines parameters for FindProduct.
type FindProductJSONBody FindProductParams

// FindPurchaseJSONBody defines parameters for FindPurchase.
type FindPurchaseJSONBody FindPurchaseParams

// GetAvailableLicensesJSONBody defines parameters for GetAvailableLicenses.
type GetAvailableLicensesJSONBody GetAvailableLicensesRequest

// ListLicenseParams defines parameters for ListLicense.
type ListLicenseParams struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
}

// CreateLicenseJSONBody defines parameters for CreateLicense.
type CreateLicenseJSONBody CreateLicenseParams

// PatchLicenseJSONBody defines parameters for PatchLicense.
type PatchLicenseJSONBody PatchLicenseParams

// UpdateLicenseJSONBody defines parameters for UpdateLicense.
type UpdateLicenseJSONBody UpdateLicenseParams

// PaymentCallbackPaygateTypeParamsPaygateType defines parameters for PaymentCallbackPaygateType.
type PaymentCallbackPaygateTypeParamsPaygateType string

// PaymentDetailsJSONBody defines parameters for PaymentDetails.
type PaymentDetailsJSONBody PaymentDetailsRequest

// GetPaymentLinkParams defines parameters for GetPaymentLink.
type GetPaymentLinkParams struct {
	PurchaseContextId string `json:"purchase_context_id"`
}

// ProcessAndroidPurchaseJSONBody defines parameters for ProcessAndroidPurchase.
type ProcessAndroidPurchaseJSONBody ProcessAndroidPurchaseRequest

// ProcessIosPurchaseJSONBody defines parameters for ProcessIosPurchase.
type ProcessIosPurchaseJSONBody ProcessIOSPurchaseRequest

// ListProductParams defines parameters for ListProduct.
type ListProductParams struct {
	Limit       int       `json:"limit"`
	Offset      int       `json:"offset"`
	ProjectId   string    `json:"project_id"`
	PaymentType *[]string `json:"payment_type,omitempty"`
}

// CreateProductJSONBody defines parameters for CreateProduct.
type CreateProductJSONBody CreateProductParams

// PatchProductJSONBody defines parameters for PatchProduct.
type PatchProductJSONBody PatchProductParams

// UpdateProductJSONBody defines parameters for UpdateProduct.
type UpdateProductJSONBody UpdateProductParams

// ListPurchaseParams defines parameters for ListPurchase.
type ListPurchaseParams struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
}

// CreatePurchaseJSONBody defines parameters for CreatePurchase.
type CreatePurchaseJSONBody CreatePurchaseParams

// PatchPurchaseJSONBody defines parameters for PatchPurchase.
type PatchPurchaseJSONBody PatchPurchaseParams

// UpdatePurchaseJSONBody defines parameters for UpdatePurchase.
type UpdatePurchaseJSONBody UpdatePurchaseParams

// SendPayInCryptoJSONBody defines parameters for SendPayInCrypto.
type SendPayInCryptoJSONBody SendPayInCryptoRequest

// SubscriptionsJSONBody defines parameters for Subscriptions.
type SubscriptionsJSONBody SubscriptionsRequest

// AppleServerNotificationsJSONRequestBody defines body for AppleServerNotifications for application/json ContentType.
type AppleServerNotificationsJSONRequestBody AppleServerNotificationsJSONBody

// ApplyForUserByEmailJSONRequestBody defines body for ApplyForUserByEmail for application/json ContentType.
type ApplyForUserByEmailJSONRequestBody ApplyForUserByEmailJSONBody

// ApplyTrialLicenseJSONRequestBody defines body for ApplyTrialLicense for application/json ContentType.
type ApplyTrialLicenseJSONRequestBody ApplyTrialLicenseJSONBody

// CreatePurchaseContextJSONRequestBody defines body for CreatePurchaseContext for application/json ContentType.
type CreatePurchaseContextJSONRequestBody CreatePurchaseContextJSONBody

// FindLicenseJSONRequestBody defines body for FindLicense for application/json ContentType.
type FindLicenseJSONRequestBody FindLicenseJSONBody

// FindProductJSONRequestBody defines body for FindProduct for application/json ContentType.
type FindProductJSONRequestBody FindProductJSONBody

// FindPurchaseJSONRequestBody defines body for FindPurchase for application/json ContentType.
type FindPurchaseJSONRequestBody FindPurchaseJSONBody

// GetAvailableLicensesJSONRequestBody defines body for GetAvailableLicenses for application/json ContentType.
type GetAvailableLicensesJSONRequestBody GetAvailableLicensesJSONBody

// CreateLicenseJSONRequestBody defines body for CreateLicense for application/json ContentType.
type CreateLicenseJSONRequestBody CreateLicenseJSONBody

// PatchLicenseJSONRequestBody defines body for PatchLicense for application/json ContentType.
type PatchLicenseJSONRequestBody PatchLicenseJSONBody

// UpdateLicenseJSONRequestBody defines body for UpdateLicense for application/json ContentType.
type UpdateLicenseJSONRequestBody UpdateLicenseJSONBody

// PaymentDetailsJSONRequestBody defines body for PaymentDetails for application/json ContentType.
type PaymentDetailsJSONRequestBody PaymentDetailsJSONBody

// ProcessAndroidPurchaseJSONRequestBody defines body for ProcessAndroidPurchase for application/json ContentType.
type ProcessAndroidPurchaseJSONRequestBody ProcessAndroidPurchaseJSONBody

// ProcessIosPurchaseJSONRequestBody defines body for ProcessIosPurchase for application/json ContentType.
type ProcessIosPurchaseJSONRequestBody ProcessIosPurchaseJSONBody

// CreateProductJSONRequestBody defines body for CreateProduct for application/json ContentType.
type CreateProductJSONRequestBody CreateProductJSONBody

// PatchProductJSONRequestBody defines body for PatchProduct for application/json ContentType.
type PatchProductJSONRequestBody PatchProductJSONBody

// UpdateProductJSONRequestBody defines body for UpdateProduct for application/json ContentType.
type UpdateProductJSONRequestBody UpdateProductJSONBody

// CreatePurchaseJSONRequestBody defines body for CreatePurchase for application/json ContentType.
type CreatePurchaseJSONRequestBody CreatePurchaseJSONBody

// PatchPurchaseJSONRequestBody defines body for PatchPurchase for application/json ContentType.
type PatchPurchaseJSONRequestBody PatchPurchaseJSONBody

// UpdatePurchaseJSONRequestBody defines body for UpdatePurchase for application/json ContentType.
type UpdatePurchaseJSONRequestBody UpdatePurchaseJSONBody

// SendPayInCryptoJSONRequestBody defines body for SendPayInCrypto for application/json ContentType.
type SendPayInCryptoJSONRequestBody SendPayInCryptoJSONBody

// SubscriptionsJSONRequestBody defines body for Subscriptions for application/json ContentType.
type SubscriptionsJSONRequestBody SubscriptionsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get anonymous entitlements
	// (GET /api/license-service/anonymous-entitlements)
	GetAnonymousEntitlements(w http.ResponseWriter, r *http.Request, params GetAnonymousEntitlementsParams)
	// Apple server notifications
	// (POST /api/license-service/apple-server-notifications)
	AppleServerNotifications(w http.ResponseWriter, r *http.Request)
	// Copy all purchases find by email and create new licenses for user in given project
	// (GET /api/license-service/apply-for-user-by-email)
	ApplyForUserByEmail(w http.ResponseWriter, r *http.Request)
	// Apply trial license by given product
	// (POST /api/license-service/apply-trial-license)
	ApplyTrialLicense(w http.ResponseWriter, r *http.Request)
	// Create new purchase context
	// (POST /api/license-service/create-purchase-context)
	CreatePurchaseContext(w http.ResponseWriter, r *http.Request)
	// Get entitlements
	// (GET /api/license-service/entitlements)
	GetEntitlements(w http.ResponseWriter, r *http.Request, params GetEntitlementsParams)
	// Find license
	// (GET /api/license-service/find-license)
	FindLicense(w http.ResponseWriter, r *http.Request)
	// Find product
	// (GET /api/license-service/find-product)
	FindProduct(w http.ResponseWriter, r *http.Request)
	// Find purchase
	// (GET /api/license-service/find-purchase)
	FindPurchase(w http.ResponseWriter, r *http.Request)
	// Get available licenses
	// (GET /api/license-service/get-available-licenses)
	GetAvailableLicenses(w http.ResponseWriter, r *http.Request)
	// List licenses
	// (GET /api/license-service/license)
	ListLicense(w http.ResponseWriter, r *http.Request, params ListLicenseParams)
	// Create license
	// (POST /api/license-service/license)
	CreateLicense(w http.ResponseWriter, r *http.Request)
	// Delete a license
	// (DELETE /api/license-service/license/{id})
	DeleteLicense(w http.ResponseWriter, r *http.Request, id string)
	// Get license
	// (GET /api/license-service/license/{id})
	GetLicense(w http.ResponseWriter, r *http.Request, id string)
	// Patch license
	// (PATCH /api/license-service/license/{id})
	PatchLicense(w http.ResponseWriter, r *http.Request, id string)
	// Update license
	// (PUT /api/license-service/license/{id})
	UpdateLicense(w http.ResponseWriter, r *http.Request, id string)
	// Handle payment callback
	// (POST /api/license-service/payment-callback)
	PaymentCallback(w http.ResponseWriter, r *http.Request)
	// Handle payment callback for specific payment gateway
	// (POST /api/license-service/payment-callback/{paygate_type})
	PaymentCallbackPaygateType(w http.ResponseWriter, r *http.Request, paygateType PaymentCallbackPaygateTypeParamsPaygateType)
	// Get payment details
	// (GET /api/license-service/payment-details)
	PaymentDetails(w http.ResponseWriter, r *http.Request)

	// (GET /api/license-service/payment-link)
	GetPaymentLink(w http.ResponseWriter, r *http.Request, params GetPaymentLinkParams)
	// Process android purchase
	// (POST /api/license-service/process-android-purchase)
	ProcessAndroidPurchase(w http.ResponseWriter, r *http.Request)
	// Process ios purchase
	// (POST /api/license-service/process-ios-purchase)
	ProcessIosPurchase(w http.ResponseWriter, r *http.Request)
	// List products
	// (GET /api/license-service/product)
	ListProduct(w http.ResponseWriter, r *http.Request, params ListProductParams)
	// Create product
	// (POST /api/license-service/product)
	CreateProduct(w http.ResponseWriter, r *http.Request)
	// Delete a product
	// (DELETE /api/license-service/product/{id})
	DeleteProduct(w http.ResponseWriter, r *http.Request, id string)
	// Get product
	// (GET /api/license-service/product/{id})
	GetProduct(w http.ResponseWriter, r *http.Request, id string)
	// Patch product
	// (PATCH /api/license-service/product/{id})
	PatchProduct(w http.ResponseWriter, r *http.Request, id string)
	// Update product
	// (PUT /api/license-service/product/{id})
	UpdateProduct(w http.ResponseWriter, r *http.Request, id string)
	// List purchases
	// (GET /api/license-service/purchase)
	ListPurchase(w http.ResponseWriter, r *http.Request, params ListPurchaseParams)
	// Create purchase
	// (POST /api/license-service/purchase)
	CreatePurchase(w http.ResponseWriter, r *http.Request)
	// Delete a purchase
	// (DELETE /api/license-service/purchase/{id})
	DeletePurchase(w http.ResponseWriter, r *http.Request, id string)
	// Get purchase
	// (GET /api/license-service/purchase/{id})
	GetPurchase(w http.ResponseWriter, r *http.Request, id string)
	// Patch purchase
	// (PATCH /api/license-service/purchase/{id})
	PatchPurchase(w http.ResponseWriter, r *http.Request, id string)
	// Update purchase
	// (PUT /api/license-service/purchase/{id})
	UpdatePurchase(w http.ResponseWriter, r *http.Request, id string)
	// Send email with offer to pay in crypto currencies
	// (POST /api/license-service/send-pay-in-crypto)
	SendPayInCrypto(w http.ResponseWriter, r *http.Request)
	// Get user active subscriptions
	// (GET /api/license-service/subscriptions)
	Subscriptions(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetAnonymousEntitlements operation middleware
func (siw *ServerInterfaceWrapper) GetAnonymousEntitlements(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAnonymousEntitlementsParams

	// ------------- Required query parameter "project_id" -------------
	if paramValue := r.URL.Query().Get("project_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "project_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "project_id", r.URL.Query(), &params.ProjectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Required query parameter "platform_type" -------------
	if paramValue := r.URL.Query().Get("platform_type"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "platform_type"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "platform_type", r.URL.Query(), &params.PlatformType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "platform_type", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAnonymousEntitlements(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AppleServerNotifications operation middleware
func (siw *ServerInterfaceWrapper) AppleServerNotifications(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AppleServerNotifications(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ApplyForUserByEmail operation middleware
func (siw *ServerInterfaceWrapper) ApplyForUserByEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ApplyForUserByEmail(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ApplyTrialLicense operation middleware
func (siw *ServerInterfaceWrapper) ApplyTrialLicense(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ApplyTrialLicense(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreatePurchaseContext operation middleware
func (siw *ServerInterfaceWrapper) CreatePurchaseContext(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePurchaseContext(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetEntitlements operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlements(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEntitlementsParams

	// ------------- Required query parameter "project_id" -------------
	if paramValue := r.URL.Query().Get("project_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "project_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "project_id", r.URL.Query(), &params.ProjectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Required query parameter "user_id" -------------
	if paramValue := r.URL.Query().Get("user_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "user_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", r.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Required query parameter "platform_type" -------------
	if paramValue := r.URL.Query().Get("platform_type"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "platform_type"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "platform_type", r.URL.Query(), &params.PlatformType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "platform_type", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlements(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// FindLicense operation middleware
func (siw *ServerInterfaceWrapper) FindLicense(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindLicense(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// FindProduct operation middleware
func (siw *ServerInterfaceWrapper) FindProduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindProduct(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// FindPurchase operation middleware
func (siw *ServerInterfaceWrapper) FindPurchase(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPurchase(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetAvailableLicenses operation middleware
func (siw *ServerInterfaceWrapper) GetAvailableLicenses(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAvailableLicenses(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListLicense operation middleware
func (siw *ServerInterfaceWrapper) ListLicense(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLicenseParams

	// ------------- Required query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLicense(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateLicense operation middleware
func (siw *ServerInterfaceWrapper) CreateLicense(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLicense(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteLicense operation middleware
func (siw *ServerInterfaceWrapper) DeleteLicense(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteLicense(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetLicense operation middleware
func (siw *ServerInterfaceWrapper) GetLicense(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLicense(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchLicense operation middleware
func (siw *ServerInterfaceWrapper) PatchLicense(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchLicense(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateLicense operation middleware
func (siw *ServerInterfaceWrapper) UpdateLicense(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateLicense(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PaymentCallback operation middleware
func (siw *ServerInterfaceWrapper) PaymentCallback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PaymentCallback(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PaymentCallbackPaygateType operation middleware
func (siw *ServerInterfaceWrapper) PaymentCallbackPaygateType(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "paygate_type" -------------
	var paygateType PaymentCallbackPaygateTypeParamsPaygateType

	err = runtime.BindStyledParameter("simple", false, "paygate_type", chi.URLParam(r, "paygate_type"), &paygateType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "paygate_type", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PaymentCallbackPaygateType(w, r, paygateType)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PaymentDetails operation middleware
func (siw *ServerInterfaceWrapper) PaymentDetails(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PaymentDetails(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPaymentLink operation middleware
func (siw *ServerInterfaceWrapper) GetPaymentLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPaymentLinkParams

	// ------------- Required query parameter "purchase_context_id" -------------
	if paramValue := r.URL.Query().Get("purchase_context_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "purchase_context_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "purchase_context_id", r.URL.Query(), &params.PurchaseContextId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "purchase_context_id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPaymentLink(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ProcessAndroidPurchase operation middleware
func (siw *ServerInterfaceWrapper) ProcessAndroidPurchase(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessAndroidPurchase(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ProcessIosPurchase operation middleware
func (siw *ServerInterfaceWrapper) ProcessIosPurchase(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessIosPurchase(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListProduct operation middleware
func (siw *ServerInterfaceWrapper) ListProduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProductParams

	// ------------- Required query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Required query parameter "project_id" -------------
	if paramValue := r.URL.Query().Get("project_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "project_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "project_id", r.URL.Query(), &params.ProjectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Optional query parameter "payment_type" -------------
	if paramValue := r.URL.Query().Get("payment_type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "payment_type", r.URL.Query(), &params.PaymentType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "payment_type", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProduct(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateProduct operation middleware
func (siw *ServerInterfaceWrapper) CreateProduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProduct(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteProduct operation middleware
func (siw *ServerInterfaceWrapper) DeleteProduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProduct(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProduct operation middleware
func (siw *ServerInterfaceWrapper) GetProduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProduct(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchProduct operation middleware
func (siw *ServerInterfaceWrapper) PatchProduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchProduct(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateProduct operation middleware
func (siw *ServerInterfaceWrapper) UpdateProduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProduct(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListPurchase operation middleware
func (siw *ServerInterfaceWrapper) ListPurchase(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPurchaseParams

	// ------------- Required query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPurchase(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreatePurchase operation middleware
func (siw *ServerInterfaceWrapper) CreatePurchase(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePurchase(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeletePurchase operation middleware
func (siw *ServerInterfaceWrapper) DeletePurchase(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePurchase(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPurchase operation middleware
func (siw *ServerInterfaceWrapper) GetPurchase(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPurchase(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchPurchase operation middleware
func (siw *ServerInterfaceWrapper) PatchPurchase(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchPurchase(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdatePurchase operation middleware
func (siw *ServerInterfaceWrapper) UpdatePurchase(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePurchase(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// SendPayInCrypto operation middleware
func (siw *ServerInterfaceWrapper) SendPayInCrypto(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendPayInCrypto(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Subscriptions operation middleware
func (siw *ServerInterfaceWrapper) Subscriptions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Subscriptions(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/anonymous-entitlements", wrapper.GetAnonymousEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/license-service/apple-server-notifications", wrapper.AppleServerNotifications)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/apply-for-user-by-email", wrapper.ApplyForUserByEmail)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/license-service/apply-trial-license", wrapper.ApplyTrialLicense)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/license-service/create-purchase-context", wrapper.CreatePurchaseContext)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/entitlements", wrapper.GetEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/find-license", wrapper.FindLicense)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/find-product", wrapper.FindProduct)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/find-purchase", wrapper.FindPurchase)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/get-available-licenses", wrapper.GetAvailableLicenses)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/license", wrapper.ListLicense)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/license-service/license", wrapper.CreateLicense)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/license-service/license/{id}", wrapper.DeleteLicense)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/license/{id}", wrapper.GetLicense)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/license-service/license/{id}", wrapper.PatchLicense)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/license-service/license/{id}", wrapper.UpdateLicense)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/license-service/payment-callback", wrapper.PaymentCallback)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/license-service/payment-callback/{paygate_type}", wrapper.PaymentCallbackPaygateType)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/payment-details", wrapper.PaymentDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/payment-link", wrapper.GetPaymentLink)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/license-service/process-android-purchase", wrapper.ProcessAndroidPurchase)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/license-service/process-ios-purchase", wrapper.ProcessIosPurchase)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/product", wrapper.ListProduct)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/license-service/product", wrapper.CreateProduct)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/license-service/product/{id}", wrapper.DeleteProduct)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/product/{id}", wrapper.GetProduct)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/license-service/product/{id}", wrapper.PatchProduct)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/license-service/product/{id}", wrapper.UpdateProduct)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/purchase", wrapper.ListPurchase)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/license-service/purchase", wrapper.CreatePurchase)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/license-service/purchase/{id}", wrapper.DeletePurchase)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/purchase/{id}", wrapper.GetPurchase)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/license-service/purchase/{id}", wrapper.PatchPurchase)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/license-service/purchase/{id}", wrapper.UpdatePurchase)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/license-service/send-pay-in-crypto", wrapper.SendPayInCrypto)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/subscriptions", wrapper.Subscriptions)
	})

	return r
}
