// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package common

import (
	"encoding/json"
	"fmt"
)

// Defines values for ErrorResult.
const (
	ErrorResultAUTHFAILED ErrorResult = "AUTH_FAILED"

	ErrorResultCONFIGURATIONREQUIRED ErrorResult = "CONFIGURATION_REQUIRED"

	ErrorResultEMAILNOTCONFIRMED ErrorResult = "EMAIL_NOT_CONFIRMED"

	ErrorResultENTRYEXISTS ErrorResult = "ENTRY_EXISTS"

	ErrorResultFORBIDDEN ErrorResult = "FORBIDDEN"

	ErrorResultINSUFFICIENTSTORAGE ErrorResult = "INSUFFICIENT_STORAGE"

	ErrorResultINTERNALERROR ErrorResult = "INTERNAL_ERROR"

	ErrorResultINVALIDARGUMENT ErrorResult = "INVALID_ARGUMENT"

	ErrorResultINVALIDCONFIGURATION ErrorResult = "INVALID_CONFIGURATION"

	ErrorResultNOLICENSE ErrorResult = "NO_LICENSE"

	ErrorResultNOTFOUND ErrorResult = "NOT_FOUND"

	ErrorResultSERVICEUNAVAILABLE ErrorResult = "SERVICE_UNAVAILABLE"

	ErrorResultSTORAGEERROR ErrorResult = "STORAGE_ERROR"

	ErrorResultTOOEARLY ErrorResult = "TOO_EARLY"

	ErrorResultTOOLONG ErrorResult = "TOO_LONG"

	ErrorResultTUNNELERROR ErrorResult = "TUNNEL_ERROR"

	ErrorResultUNAUTHORIZED ErrorResult = "UNAUTHORIZED"
)

// ConnectionIdentifiers defines model for ConnectionIdentifiers.
type ConnectionIdentifiers struct {
	InstallationId *string `json:"installation_id"`
	SessionId      *string `json:"session_id"`
	UserId         *string `json:"user_id"`
}

// Generic error response.
type Error struct {
	// Message, which we can put to application logs.
	Details *string `json:"details,omitempty"`

	// User-friendly error description.
	Error *string `json:"error,omitempty"`

	// The name of field, caused error.
	Field *string `json:"field,omitempty"`

	// Machine-readable error code.
	Result ErrorResult `json:"result"`
}

// Machine-readable error code.
type ErrorResult string

// Labels in JSON format
type LabelsJson struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Generic error response.
type ResponseError Error

// Getter for additional properties for LabelsJson. Returns the specified
// element and whether it was found
func (a LabelsJson) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LabelsJson
func (a *LabelsJson) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LabelsJson to handle AdditionalProperties
func (a *LabelsJson) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LabelsJson to handle AdditionalProperties
func (a LabelsJson) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
