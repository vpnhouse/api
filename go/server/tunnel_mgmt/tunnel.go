// Package tunnel_mgmt provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package tunnel_mgmt

import (
	"context"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
	externalRef1 "github.com/vpnhouse/api/go/server/federation"
)

const (
	Federation_keyScopes = "Federation_key.Scopes"
)

// Contains short statistic from the node
type PingResponse struct {
	PeersActive int   `json:"peers_active"`
	PeersTotal  int   `json:"peers_total"`
	RxBytes     int64 `json:"rx_bytes"`
	RxSpeed     int64 `json:"rx_speed"`
	TxBytes     int64 `json:"tx_bytes"`
	TxSpeed     int64 `json:"tx_speed"`
}

// TrustedKey defines model for TrustedKey.
type TrustedKey string

// TrustedKeyRecord defines model for TrustedKeyRecord.
type TrustedKeyRecord struct {
	Id  string     `json:"id"`
	Key TrustedKey `json:"key"`
}

// FederationSetAuthorizerKeysJSONBody defines parameters for FederationSetAuthorizerKeys.
type FederationSetAuthorizerKeysJSONBody []externalRef1.PublicKeyRecord

// FederationSetAuthorizerKeysJSONRequestBody defines body for FederationSetAuthorizerKeys for application/json ContentType.
type FederationSetAuthorizerKeysJSONRequestBody FederationSetAuthorizerKeysJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/tunnel/federation/ping)
	FederationPing(w http.ResponseWriter, r *http.Request)
	// Push authorizer keys to the tunnel node
	// (POST /api/tunnel/federation/set-authorizer-keys)
	FederationSetAuthorizerKeys(w http.ResponseWriter, r *http.Request)
	// List trusted keys
	// (GET /api/tunnel/trusted-keys)
	AdminListTrustedKeys(w http.ResponseWriter, r *http.Request)
	// Delete trusted key
	// (DELETE /api/tunnel/trusted-keys/{id})
	AdminDeleteTrustedKey(w http.ResponseWriter, r *http.Request, id string)
	// Get trusted key
	// (GET /api/tunnel/trusted-keys/{id})
	AdminGetTrustedKey(w http.ResponseWriter, r *http.Request, id string)
	// Add trusted key
	// (POST /api/tunnel/trusted-keys/{id})
	AdminAddTrustedKey(w http.ResponseWriter, r *http.Request, id string)
	// Update trusted key
	// (PUT /api/tunnel/trusted-keys/{id})
	AdminUpdateTrustedKey(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// FederationPing operation middleware
func (siw *ServerInterfaceWrapper) FederationPing(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Federation_keyScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FederationPing(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// FederationSetAuthorizerKeys operation middleware
func (siw *ServerInterfaceWrapper) FederationSetAuthorizerKeys(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Federation_keyScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FederationSetAuthorizerKeys(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminListTrustedKeys operation middleware
func (siw *ServerInterfaceWrapper) AdminListTrustedKeys(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Federation_keyScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListTrustedKeys(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminDeleteTrustedKey operation middleware
func (siw *ServerInterfaceWrapper) AdminDeleteTrustedKey(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Federation_keyScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminDeleteTrustedKey(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminGetTrustedKey operation middleware
func (siw *ServerInterfaceWrapper) AdminGetTrustedKey(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Federation_keyScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetTrustedKey(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminAddTrustedKey operation middleware
func (siw *ServerInterfaceWrapper) AdminAddTrustedKey(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Federation_keyScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminAddTrustedKey(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminUpdateTrustedKey operation middleware
func (siw *ServerInterfaceWrapper) AdminUpdateTrustedKey(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Federation_keyScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminUpdateTrustedKey(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/tunnel/federation/ping", wrapper.FederationPing)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/tunnel/federation/set-authorizer-keys", wrapper.FederationSetAuthorizerKeys)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/tunnel/trusted-keys", wrapper.AdminListTrustedKeys)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/tunnel/trusted-keys/{id}", wrapper.AdminDeleteTrustedKey)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/tunnel/trusted-keys/{id}", wrapper.AdminGetTrustedKey)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/tunnel/trusted-keys/{id}", wrapper.AdminAddTrustedKey)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/tunnel/trusted-keys/{id}", wrapper.AdminUpdateTrustedKey)
	})

	return r
}
